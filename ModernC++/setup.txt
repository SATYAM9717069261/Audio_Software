		Set up your Project using c-make

1. touch CMakeLists.txt
2. mkdir src
3. mkdir build
	2.1 open CMakeLists.txt
		"
			project(cmake_test_project)
			cmake_minimum_required(VERSION 3.0) 
		"
4. /build $ cmake .. //cmake search for CMakeList.txt which is in parent folder
5. /CMakeLists.txt (add)
		"
			message(STATUS "!!!!${ PROJECT_SOURCE_DIR  }") 
			add_subdirectory(${PROJECT_SOURCE_DIR}/src) 
		"
6. /build $cmake .. [show an error src doesn't contain and CMakeLists File]
7. /src touch CMakeLists.txt
8. /src/CMakeLists.txt
		"
			add_executable(bin_main main.cpp) //bin_main is binary executable file
		" 
9. /src/main.cpp
		"
			#include<iostream>
			int main(){
				std::cout<<"Hello World";
				return 0;
			}
		"
10. build/ $Cmake ..
11. build/ make //show status of how much you left to setup project in percentage
12. Congratulation we create all boiler plates and linking file
	message are looks like => "
		[ 50%] Building CXX object src/CMakeFiles/bin_main.dir/main.cpp.o
		[100%] Linking CXX executable bin_main 
		[100%] Built target bin_main
	"
13. Executable file inside build/src/bin_main
14. Don't Track build folder if you use any version control


			ADD Library
15. src/ [ We make header File inside src/ ]
16. src/ vim hello.h
		"
			#pragma once //use for it include only one time in main.cpp
			#include<iostream.h>
			void Printhello(){
				std::cout<<"Function call Sucessfull";
			}
		"
16.1. src/main.cpp
			"
			#include"hello.h"
			int main(){
				Printhello();
				return 0;
			}
			" 
17. build/ $cmake ..
18. build/ make
19. build/src/ $./bin_main
20. if our project have multiple headers in different subdir then we specify path of header inside CMakeLists.txt[root Cmake not src Cmake]
			"
				project(cmake_test_project)
				cmake_minimum_required(VERSION 3.0)
				message(STATUS "!!!!${PROJECT_SOURCE_DIR}")
				include_directories(${PROJECT_SOURCE_DIR}/src)// if you have multiple headers in different folder then
				include_directories(${PROJECT_SOURCE_DIR}/src
						    ${PROJECT_SOURCE_DIR}/src
						)

			
			ADD Libraries
21. every header dir contain two files (.h & .cpp)  where inside .h all decelatation and .cpp have all defination
 
22. src/hello.cpp
		"
			#include"hello.h"
			void Printhello(){
				std::cout<<"Call Sucessfull";
				}
		"
23. src/hello.h
		"
			#pragma once
			#include<iostream>
			void Printhello();
		"
24. now we create header and its cpp. we tell cmake we use header and its cpp
25. src/CMakeLists.txt
		"
			add_library(hello hello.cpp)
			add_executable(bin_main main.cpp)
			target_link_libraries(bin_main hello)
		" 
26. Build your Project again
27. IF you have multiple library then src/CMakeLists.txt looks like
		"
			add_library(hello hello.cpp)
			add_library(lib lib.cpp)
			add_executable(bin_main main.cpp)
			target_link_libraries(bin_main hello lib)
28. Build it again

29. There Are two type of libraries in C
	29.1. Static [if we move our code then library code is stuck inside your main binary object](.o)
	29.2. Dynamic [if we move our code then binary object always looking for library](.so)
30. Bydefault Static Library we generate for dynamic library we add SHARED inside CMAKELIST.txt
		"
			add_library(hello SHARED hello.cpp)
			add_executable(bin_main main.cpp)
			target_link_libraries(bin_main hello)
		"

				ADD Testing (we use Google testing enviroment/framework)







			Add Google Test in Projects 

31. install libgtest-dev using sudo
32. all google file are store in /usr/src/gtest/
33. mkdir tests
34. CMakeLists.txt
	"//add at the end of file
		enable_testing()
		add_subdirectory(${PROJECT_SOURCE_DIR}/tests)
	"
35. tests/touch CMakeLists.txt
		"
			add_subdirectory(/usr/src/gtest
					${PROJECT_BINARY_DIR}/gtests)
			include(CTest)
		"		
36. Build it..		
37. Now add CTest inside Project and use it
38. tests/touch test_blah.cpp
	"
		#include<gtest/gtest.h>
		#include"blah.h"
		TEST(TestBlah,OutputTest){
			EXPECT_EQ(1,Sum());
		}

	"
39. src/touch blah.h
	"	
		#pragma once
		#include<iostrem>
		int Sum(int a, int b);
	"
40. src/touch blah.cpp
	"
		#include"blah.h"
		int Sum(int a, int b){
			return a+b;
		}
	"
41. Now we link your blah library to test.
42. tests/vim MakeLists.txt
		"
			add_subdirectory(/usr/src/gtest
			${PROJECT_BINARY_DIR}/gtests)
			include(CTest)
			add_executable(test_blah test_blah.cpp)
			target_link_libraries(test_blah blah gtest gtest_main)
			add_test(test_blah tests/test_blah)
		"	
43. Now Build it using cmake and make
44 					Now We have One more Dir inside build (GTEST)  
.
├── build
│   ├── bin
│   ├── CMakeFiles
│   │   ├── 3.16.3
│   │   │   ├── CompilerIdC
│   │   │   │   └── tmp
│   │   │   └── CompilerIdCXX
│   │   │       └── tmp
│   │   └── CMakeTmp
│   ├── gtests
│   │   └── CMakeFiles
│   │       ├── gtest.dir
│   │       │   └── src
│   │       └── gtest_main.dir
│   │           └── src
│   ├── lib
│   ├── src
│   │   └── CMakeFiles
│   │       ├── bin_main.dir
│   │       ├── blah.dir
│   │       └── hello.dir
│   ├── Testing
│   │   └── Temporary
│   └── tests
│       └── CMakeFiles
│           ├── ContinuousBuild.dir
│           ├── ContinuousConfigure.dir
│           ├── ContinuousCoverage.dir
│           ├── Continuous.dir
│           ├── ContinuousMemCheck.dir
│           ├── ContinuousStart.dir
│           ├── ContinuousSubmit.dir
│           ├── ContinuousTest.dir
│           ├── ContinuousUpdate.dir
│           ├── ExperimentalBuild.dir
│           ├── ExperimentalConfigure.dir
│           ├── ExperimentalCoverage.dir
│           ├── Experimental.dir
│           ├── ExperimentalMemCheck.dir
│           ├── ExperimentalStart.dir
│           ├── ExperimentalSubmit.dir
│           ├── ExperimentalTest.dir
│           ├── ExperimentalUpdate.dir
│           ├── NightlyBuild.dir
│           ├── NightlyConfigure.dir
│           ├── NightlyCoverage.dir
│           ├── Nightly.dir
│           ├── NightlyMemCheck.dir
│           ├── NightlyMemoryCheck.dir
│           ├── NightlyStart.dir
│           ├── NightlySubmit.dir
│           ├── NightlyTest.dir
│           ├── NightlyUpdate.dir
│           └── test_blah.dir
├── src
└── tests

		56 directories

46. One more Dir we have test/
				See YOUR TEST 
47. build/test/{executable file In my case we have test_blah} Name test_blah is specify inside CMAKE File
48 Execute it.

Running main() from /usr/src/gtest/src/gtest_main.cc
[==========] Running 1 test from 1 test suite.
[----------] Global test environment set-up.
[----------] 1 test from TestBlah
[ RUN      ] TestBlah.OutputTest
[       OK ] TestBlah.OutputTest (0 ms)
[----------] 1 test from TestBlah (0 ms total)

[----------] Global test environment tear-down
[==========] 1 test from 1 test suite ran. (0 ms total)
[  PASSED  ] 1 test.



                                    Name Space 

49. Don't Use namespace std in hader file because it allow all function use inside user program. If user want to use own cout function inside own program than compiler confuse which one you wants to use
50. #include<iostream>
	usig namespace std; // don't use like that
51 #include<iostream>
	using namespace std:cout
	using namespace std::endl // we use only two of methods from std
		
		OR
52. std::cout<<""; // use like that 

53. Don't hard Code any Variable 
54. Declare an nameless namespace on top of cpp file that namespace variable is only use with in cpp file
55. namespace{
		const int max=99999;
		const int min=0;
	}

				STRUCT

56. all variable in struct is public, if you define an function in struct it became automatic class
57. There is One difference between struct and class , In Struct all of things are public but in class we have (private public , Protected)
58. If you want return more than one data from function use struct because struct store multiple data on it.

 
